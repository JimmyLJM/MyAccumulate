#在网上down下了一个ES6深入浅出的PDF作为入门的基础学习
以下目录：
目录
卷首语..............................
ES6 是什么..........................
迭代器和 for-of 循环 ...............
生成器 Generators...................
模板字符串..........................
不定参数和默认参数..................
解构 Destructuring..................
箭头函数 Arrow Functions ...........
Symbols.............................
学习 Babel 和 Broccoli，马上就用 ES6
集合................................
生成器 Generators，续篇.............
代理 Proxies........................
类 Class............................
let 和 const........................
子类 Subclassing ...................
模块 Modules........................
展望未来............................


# 扫盲知识点
# ES6 迭代器(.next(),for-of循环)、
# 生成器 Generators(yield,返回迭代器)、
# 模板字符串（`${}` ）、
# 不定参数（补充arg对象相关知识）
# 解构 Destructuring (迭代器、数组 & 对象 ^嵌套)
# 箭头函数 Arrow Functions （
#              <!--  单行注释
#               -->  “趋向于”操作符
#               <=  小于等于
#               =>  这又是什么？   lambda?
      编写函数的新语法:接受多重参数 
      /*********************************************/
      // ES5
      var total = values.reduce(function (a, b) {
      return a + b;
      }, 0);
      // ES6
      var total = values.reduce((a, b) => a + b, 0);
      /*********************************************/
      非常函数化:  
      
      块语句:
      /*********************************************/
      // ES5
      $("#confetti-btn").click(function (event) {
      playTrumpet();
      fireConfettiCannon();
      
      // ES6
      $("#confetti-btn").click(event => {
      playTrumpet();
      fireConfettiCannon();
      });
      /*********************************************/
      
       Promises 的代码:
       /*********************************************/
       
       创建对象：tip,当使用箭头函数创建普通对象时，总是需要将对象包裹在小括号里
       /*********************************************/
       // 为与你玩耍的每一个小狗创建一个新的空对象
      var chewToys = puppies.map(puppy => {}); // 这样写会报 Bug！
      var chewToys = puppies.map(puppy => ({})); //
      /*********************************************/
      
      箭头函数没有它自己的 this  值，箭头函数内的 this 值继承自外围作用域
      
      在 ES6 中，不需要再 hackthis 了，但你需要遵循以下规则：
      通过 object.method()语法调用的方法使用非箭头函数定义，这些函数需要从调用者
的作用域中获取一个有意义的 this 值。其它情况全都使用箭头函数。
      // ES6
      {
      ...
      addAll: function addAll(pieces) {
      _.each(pieces, piece => this.add(piece));
      },
      ...
      }
});
#）
#
#
#
#
#
#
#
#
